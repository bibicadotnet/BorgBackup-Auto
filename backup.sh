#!/bin/bash

# Ki·ªÉm tra root privileges
if [ "$(id -u)" != "0" ]; then
    echo "Script n√†y c·∫ßn ch·∫°y v·ªõi quy·ªÅn root"
    exit 1
fi

# T·ª± ƒë·ªông renice ch√≠nh script n√†y
renice -n 19 -p $$ > /dev/null 2>&1
ionice -c 2 -n 7 -p $$ > /dev/null 2>&1

# Set up Telegram bot API v√† chat ID
BOT_API_KEY="6360723418:AAE-nXLphf2dGqEM_oKOMTvwQq9Otis5hQg"
CHAT_ID="489842337"

# Thi·∫øt l·∫≠p bi·∫øn c·∫•u h√¨nh
BORG_REPO="/root/borg-temp/borg-repo"
BACKUP_DIR="/home /var/spool/cron/crontabs/root"
RCLONE_REMOTE="cloudflare-r2:/borg-backup/bibica-net"
LOG_FILE="/var/log/borg-backup.log"
export PATH=$PATH:/usr/local/bin:/usr/bin:/bin


# H√†m ghi log
log_message() {
    local level="$1"
    local message="$2"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$timestamp] [$level] $message" >> "$LOG_FILE"
    echo "[$level] $message"
}

# H√†m ki·ªÉm tra ƒëi·ªÅu ki·ªán ti√™n quy·∫øt
check_prerequisites() {
    # Ki·ªÉm tra borg ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t
    if ! command -v borg &> /dev/null; then
        log_message "ERROR" "Borg backup ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t"
        return 1
    fi

    # Ki·ªÉm tra rclone ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t
    if ! command -v rclone &> /dev/null; then
        log_message "ERROR" "Rclone ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t"
        return 1
    fi

    # Ki·ªÉm tra th∆∞ m·ª•c v√† file backup t·ªìn t·∫°i
    for path in $BACKUP_DIR; do
        if [ ! -e "$path" ]; then
            log_message "ERROR" "ƒê∆∞·ªùng d·∫´n backup kh√¥ng t·ªìn t·∫°i: $path"
            return 1
        fi
    done

    # Ki·ªÉm tra v√† t·∫°o th∆∞ m·ª•c borg repository n·∫øu c·∫ßn
    if [ ! -d "$BORG_REPO" ]; then
        log_message "INFO" "T·∫°o m·ªõi Borg repository: $BORG_REPO"
        mkdir -p "$BORG_REPO"
        borg init --encryption=none "$BORG_REPO"
        if [ $? -ne 0 ]; then
            log_message "ERROR" "Kh√¥ng th·ªÉ kh·ªüi t·∫°o Borg repository"
            return 1
        fi
    fi

    # T·∫°o th∆∞ m·ª•c log n·∫øu ch∆∞a t·ªìn t·∫°i
    log_dir=$(dirname "$LOG_FILE")
    if [ ! -d "$log_dir" ]; then
        mkdir -p "$log_dir"
    fi

    return 0
}

# H√†m g·ª≠i th√¥ng b√°o Telegram v·ªõi log chi ti·∫øt
send_telegram_message() {
    local message="$1"
    local error_log="$2"
    
    # N·∫øu l√† th√¥ng b√°o th√†nh c√¥ng v√† kh√¥ng c√≥ log l·ªói, kh√¥ng g·ª≠i
    if [[ "$message" == *"‚úÖ"* ]] && [ -z "$error_log" ]; then
        return 0
    fi
    
    # Chu·∫©n b·ªã th√¥ng b√°o v·ªõi th√¥ng tin chi ti·∫øt
    local full_message="$message"
    if [ ! -z "$error_log" ]; then
        # Th√™m th√¥ng tin th·ªùi gian
        local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
        full_message="${full_message}\n\nüïí Th·ªùi gian: ${timestamp}"
        # Th√™m chi ti·∫øt l·ªói
        full_message="${full_message}\n\nüìù Chi ti·∫øt:\n<code>${error_log}</code>"
        # Th√™m th√¥ng tin h·ªá th·ªëng
        local hostname=$(hostname)
        local system_info=$(uname -a)
        full_message="${full_message}\n\nüñ• M√°y ch·ªß: ${hostname}\nüíª H·ªá th·ªëng: ${system_info}"
    fi
    
    curl -s -X POST "https://api.telegram.org/bot$BOT_API_KEY/sendMessage" \
        -d chat_id="$CHAT_ID" \
        -d "text=${full_message}" \
        -d "parse_mode=HTML" \
        > /dev/null
    
    # Ghi log
    log_message "INFO" "ƒê√£ g·ª≠i th√¥ng b√°o Telegram"
}

# ƒê∆∞·ªùng d·∫´n lock file
LOCKFILE="/var/lock/borg-backup.lock"
LOCK_TIMEOUT=3600  # 1 gi·ªù (t√≠nh b·∫±ng gi√¢y)

# H√†m t·∫°o t√™n backup ƒë·ªôc nh·∫•t v·ªõi random
generate_unique_backup_name() {
    local datestamp=$(date +%Y-%m-%d-%H-%M-%S)
    echo "backup-${datestamp}-$RANDOM"
}

# H√†m ki·ªÉm tra xem l·ªói c√≥ n√™n retry kh√¥ng
should_retry() {
    local error_message="$1"
    
    # Danh s√°ch c√°c l·ªói kh√¥ng n√™n retry
    local fatal_errors=(
        "Repository does not exist"
        "Connection refused"
        "No such file or directory"
        "Permission denied"
        "Authentication failed"
    )
    
    for error in "${fatal_errors[@]}"; do
        if echo "$error_message" | grep -q "$error"; then
            return 1
        fi
    done
    
    return 0
}

# H√†m th·ª±c hi·ªán backup v·ªõi retry logic v√† log l·ªói chi ti·∫øt
perform_backup_with_retry() {
    local command="$1"
    local operation="$2"
    local max_retries=3
    local retry_delay=5
    local retry_count=0
    local error_log=""
    
    while [ $retry_count -lt $max_retries ]; do
        # Chu·∫©n b·ªã command c·∫ßn th·ª±c thi
        local exec_command="$command"
        if [ "$operation" = "Borg Create" ]; then
            BACKUP_NAME=$(generate_unique_backup_name)
            exec_command="borg create --stats \"$BORG_REPO::$BACKUP_NAME\" $BACKUP_DIR"
        fi
        
        log_message "INFO" "Th·ª≠ $operation l·∫ßn $((retry_count + 1))..."
        
        # Th·ª±c thi l·ªánh v√† capture output
        error_log=$(eval "$exec_command" 2>&1)
        if [ $? -eq 0 ]; then
            log_message "INFO" "$operation th√†nh c√¥ng!"
            return 0
        else
            local attempt=$((retry_count + 1))
            log_message "ERROR" "L·∫ßn th·ª≠ $attempt th·∫•t b·∫°i:\n$error_log"
            
            # Ki·ªÉm tra xem c√≥ n√™n retry kh√¥ng
            if ! should_retry "$error_log"; then
                log_message "ERROR" "L·ªói nghi√™m tr·ªçng, kh√¥ng retry"
                send_telegram_message "‚ùå $operation th·∫•t b·∫°i v·ªõi l·ªói nghi√™m tr·ªçng!" "$error_log"
                return 1
            fi
            
            # G·ª≠i th√¥ng b√°o l·ªói ngay khi g·∫∑p l·ªói
            send_telegram_message "‚ö†Ô∏è $operation th·∫•t b·∫°i l·∫ßn th·ª≠ $attempt/$max_retries" "$error_log"
            
            sleep $retry_delay
            retry_count=$((retry_count + 1))
        fi
    done
    
    send_telegram_message "‚ùå $operation th·∫•t b·∫°i sau $max_retries l·∫ßn th·ª≠!" "$error_log"
    return 1
}

# Ki·ªÉm tra ƒëi·ªÅu ki·ªán ti√™n quy·∫øt
log_message "INFO" "Ki·ªÉm tra ƒëi·ªÅu ki·ªán ti√™n quy·∫øt..."
if ! check_prerequisites; then
    send_telegram_message "‚ùå Ki·ªÉm tra ƒëi·ªÅu ki·ªán ti√™n quy·∫øt th·∫•t b·∫°i!" "$(tail -n 50 "$LOG_FILE")"
    exit 1
fi

# Ki·ªÉm tra lock file
if [ -e "$LOCKFILE" ]; then
    LOCK_AGE=$(($(date +%s) - $(date +%s -r "$LOCKFILE")))
    if [ "$LOCK_AGE" -gt "$LOCK_TIMEOUT" ]; then
        log_message "WARNING" "Lock file qu√° c≈© (${LOCK_AGE}s). X√≥a v√† ti·∫øp t·ª•c."
        rm -f "$LOCKFILE"
    else
        log_message "WARNING" "Script ƒëang ch·∫°y (${LOCK_AGE}s). Tho√°t."
        send_telegram_message "‚ö†Ô∏è Kh√¥ng th·ªÉ ch·∫°y backup - Script ƒëang ch·∫°y" "Lock file age: ${LOCK_AGE}s"
        exit 1
    fi
fi

# S·ª≠ d·ª•ng flock ƒë·ªÉ ki·ªÉm tra v√† t·∫°o lock file
exec 200>"$LOCKFILE"
flock -n 200 || {
    log_message "WARNING" "Script ƒëang ch·∫°y (lock file). Tho√°t."
    send_telegram_message "‚ö†Ô∏è Kh√¥ng th·ªÉ ch·∫°y backup - Script ƒëang ch·∫°y" "Lock file exists"
    exit 1
}

# Ghi PID v√†o lock file
echo $$ > "$LOCKFILE"

# ƒê·∫£m b·∫£o lock file ƒë∆∞·ª£c x√≥a khi script k·∫øt th√∫c
trap 'rm -f "$LOCKFILE"; log_message "INFO" "Script k·∫øt th√∫c."; exit' EXIT SIGINT SIGTERM

# Backup b·∫±ng Borg v·ªõi retry logic
log_message "INFO" "B·∫Øt ƒë·∫ßu t·∫°o backup v·ªõi Borg..."
perform_backup_with_retry "" "Borg Create"
if [ $? -ne 0 ]; then
    exit 1
fi

# Prune c√°c backup c≈©
log_message "INFO" "B·∫Øt ƒë·∫ßu prune backup c≈©..."
perform_backup_with_retry "borg prune \
    --keep-daily=30 \
    --keep-monthly=1 \
    \"$BORG_REPO\"" "Borg Prune"
if [ $? -ne 0 ]; then
    exit 1
fi

# Compact repository
log_message "INFO" "B·∫Øt ƒë·∫ßu compact repository..."
perform_backup_with_retry "borg compact \"$BORG_REPO\"" "Borg Compact"
if [ $? -ne 0 ]; then
    exit 1
fi

# ƒê·ªìng b·ªô backup l√™n Cloudflare R2
log_message "INFO" "ƒê·ªìng b·ªô backup l√™n Cloudflare R2..."
perform_backup_with_retry "rclone sync \"$BORG_REPO\" \"$RCLONE_REMOTE\" \
    --transfers=30 --checkers=30 --size-only" "Rclone Sync"
if [ $? -ne 0 ]; then
    exit 1
fi

# K·∫øt th√∫c script th√†nh c√¥ng - kh√¥ng g·ª≠i th√¥ng b√°o
log_message "INFO" "Backup ho√†n th√†nh!"
exit 0
