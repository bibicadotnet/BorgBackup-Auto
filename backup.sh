#!/bin/bash

####################################################################################################################################
# Set up Telegram bot API v√† chat ID
BOT_API_KEY="xxxxxxx:xxxxx-xxxxx_xxxxxxxx"
CHAT_ID="xxxxxxxx"

# Thi·∫øt l·∫≠p bi·∫øn c·∫•u h√¨nh cho vi·ªác backup

# ƒê∆∞·ªùng d·∫´n t·ªõi kho l∆∞u tr·ªØ Borg
# ƒê√¢y l√† n∆°i Borg s·∫Ω l∆∞u tr·ªØ c√°c b·∫£n sao l∆∞u, c√≥ th·ªÉ l√† m·ªôt th∆∞ m·ª•c c·ª•c b·ªô ho·∫∑c m·ªôt kho l∆∞u tr·ªØ tr√™n m·ªôt m√°y ch·ªß t·ª´ xa.
BORG_REPO="/root/borg-temp/borg-repo"

# ƒê√¢y l√† c√°c th∆∞ m·ª•c, file ... ch·ª©a d·ªØ li·ªáu c·∫ßn sao l∆∞u. 
# V√≠ d·ª•: /home v√† /var/spool/cron/crontabs/root (ph√¢n c√°ch nhau b·∫±ng kho·∫£ng tr·∫Øng)
BACKUP_DIR="/home /var/spool/cron/crontabs/root"

# C·∫•u h√¨nh cho Rclone ƒë·ªÉ ƒë·ªìng b·ªô d·ªØ li·ªáu l√™n cloud
# V√≠ d·ª• c·∫•u h√¨nh Cloudflare R2, Google Drive tr√™n Rclone, v√† ƒë∆∞·ªùng d·∫´n ƒë√≠ch (borg-backup/bibica-net).
RCLONE_REMOTE="cloudflare-r2:/borg-backup/bibica-net"
RCLONE_REMOTE2="google-drive:/borg-backup/bibica-net"

# S·ªë l∆∞·ª£ng b·∫£n backup ƒë∆∞·ª£c gi·ªØ l·∫°i m·ªói gi·ªù. 
# Gi·ªØ 24 b·∫£n backup cho 24 gi·ªù g·∫ßn nh·∫•t (1h 1 b·∫£n)
KEEP_HOURLY=24

# S·ªë l∆∞·ª£ng b·∫£n backup ƒë∆∞·ª£c gi·ªØ l·∫°i trong bao nhi√™u ng√†y
# Trong tr∆∞·ªùng h·ª£p n√†y, gi·ªØ 31 b·∫£n backup, t·ª©c l√† gi·ªØ l·∫°i 1 b·∫£n backup m·ªói ng√†y trong 31 ng√†y g·∫ßn nh·∫•t.
KEEP_DAILY=31

# Tham s·ªë n√†y quy·∫øt ƒë·ªãnh s·ªë l∆∞·ª£ng b·∫£n backup ƒë∆∞·ª£c gi·ªØ l·∫°i m·ªói th√°ng. 
# Trong tr∆∞·ªùng h·ª£p n√†y, gi·ªØ l·∫°i m·ªói th√°ng, nghƒ©a l√† 12 b·∫£n backup cho m·ªôt nƒÉm ho·∫∑c 24 b·∫£n backup cho hai nƒÉm.
KEEP_MONTHLY=1

# Th·ªùi gian ch·∫°y ki·ªÉm tra l·∫°i to√†n b·ªô d·ªØ li·ªáu backup c√≥ b·ªã l·ªói kh√¥ng (quan tr·ªçng)
# Tr√™n h·ªá th·ªëng quan tr·ªçng, 1 ng√†y ki·ªÉm tra 1 l·∫ßn nh∆∞ m·∫∑c ƒë·ªãnh
# Tr√™n h·ªá th·ªëng th√¥ng th∆∞·ªùng, 7-14-30 ng√†y ki·ªÉm tra 1 l·∫ßn l√† ƒë·ªß
VERIFY_INTERVAL=86400  # 24 gi·ªù t√≠nh b·∫±ng gi√¢y
LAST_VERIFY_FILE="/var/log/borgbackup/borg-last-verify"

# ƒê∆∞·ªùng d·∫´n t·ªõi t·ªáp log c·ªßa script sao l∆∞u
# Ki·ªÉm tra l·ªãch s·ª≠ sao l∆∞u v√† x·ª≠ l√Ω c√°c s·ª± c·ªë khi c·∫ßn.
LOG_FILE="/var/log/borgbackup/borg-backup.log"
MAX_LOG_SIZE=10485760  # 10MB (t√≠nh b·∫±ng byte)

# ƒê∆∞·ªùng d·∫´n lock file
LOCKFILE="/var/log/borgbackup/borg-backup.lock"
LOCK_TIMEOUT=3600  # 1 gi·ªù (t√≠nh b·∫±ng gi√¢y)
####################################################################################################################################

# Ki·ªÉm tra root privileges
if [ "$(id -u)" != "0" ]; then
    echo "Script n√†y c·∫ßn ch·∫°y v·ªõi quy·ªÅn root"
    exit 1
fi

# Gi·∫£m m·ª©c ∆∞u ti√™n CPU v√† I/O c·ªßa script ƒë·ªÉ gi·∫£m ·∫£nh h∆∞·ªüng ƒë·∫øn hi·ªáu su·∫•t h·ªá th·ªëng
renice -n 19 -p $$ > /dev/null 2>&1  # ƒê·∫∑t m·ª©c ∆∞u ti√™n CPU th·∫•p nh·∫•t cho script
ionice -c 2 -n 7 -p $$ > /dev/null 2>&1  # ƒê·∫∑t m·ª©c ∆∞u ti√™n I/O th·∫•p nh·∫•t ·ªü ch·∫ø ƒë·ªô "best-effort"

# H√†m ghi log
log_message() {
    local level="$1"  # M·ª©c ƒë·ªô log (v√≠ d·ª•: WARNING, ERROR, INFO)
    local message="$2"  # N·ªôi dung th√¥ng b√°o log
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')  # Th·ªùi gian hi·ªán t·∫°i

    # Ki·ªÉm tra dung l∆∞·ª£ng file log
    if [ -f "$LOG_FILE" ] && [ $(stat -c %s "$LOG_FILE") -ge $MAX_LOG_SIZE ]; then
        echo -e "[$timestamp] [INFO] File log v∆∞·ª£t qu√° dung l∆∞·ª£ng $MAX_LOG_SIZE bytes. ƒêang x·ª≠ l√Ω..." >> "$LOG_FILE"

        # L·ªçc ch·ªâ gi·ªØ l·∫°i WARNING v√† ERROR
        grep -E '^\[.*\] \[(WARNING|ERROR)\]' "$LOG_FILE" > "$TEMP_LOG_FILE"
        mv "$TEMP_LOG_FILE" "$LOG_FILE"

        # Ki·ªÉm tra l·∫°i dung l∆∞·ª£ng sau khi l·ªçc
        if [ $(stat -c %s "$LOG_FILE") -ge $MAX_LOG_SIZE ]; then
            echo -e "[$timestamp] [INFO] File log v·∫´n v∆∞·ª£t qu√° dung l∆∞·ª£ng sau khi l·ªçc. C·∫Øt b·ªõt log c≈©..." >> "$LOG_FILE"
            
            # C·∫Øt b·ªõt c√°c d√≤ng c≈©, ch·ªâ gi·ªØ l·∫°i 100 d√≤ng cu·ªëi
            tail -n 100 "$LOG_FILE" > "$TEMP_LOG_FILE"
            mv "$TEMP_LOG_FILE" "$LOG_FILE"
        fi
    fi

    # Ghi log m·ªõi v√†o file log
    echo -e "[$timestamp] [$level] $message" >> "$LOG_FILE"

    # In log ra m√†n h√¨nh
    echo -e "[$level] $message"
}

# H√†m ki·ªÉm tra xem c√≥ n√™n ch·∫°y verify kh√¥ng
should_run_verify() {
    # N·∫øu file kh√¥ng t·ªìn t·∫°i, t·∫°o m·ªõi v·ªõi timestamp hi·ªán t·∫°i
    if [ ! -f "$LAST_VERIFY_FILE" ]; then
        echo "$(date +%s)" > "$LAST_VERIFY_FILE"
        return 0
    fi

    last_verify=$(cat "$LAST_VERIFY_FILE")
    current_time=$(date +%s)
    elapsed=$((current_time - last_verify))

    # Ch·∫°y verify n·∫øu ƒë√£ qua VERIFY_INTERVAL
    if [ $elapsed -ge $VERIFY_INTERVAL ]; then
        echo "$current_time" > "$LAST_VERIFY_FILE"
        return 0
    fi
    return 1
}

# H√†m verify v·ªõi logging v√† th√¥ng b√°o
perform_verify() {
    if should_run_verify; then
        # Ghi v√†o log ƒë·ªÉ bi·∫øt qu√° tr√¨nh verify b·∫Øt ƒë·∫ßu
        log_message "INFO" "B·∫Øt ƒë·∫ßu verify backup..."

        # Th·ª±c hi·ªán verify, v·ª´a hi·ªán ra m√†n h√¨nh v·ª´a capture v√†o error_log
        local error_log=""
        error_log=$(borg check --verify-data -v "$BORG_REPO" 2>&1 | tee /dev/tty)
        local verify_status=$?

        # Ki·ªÉm tra n·∫øu c√≥ th√¥ng b√°o "Finished full repository check, no problems found" v√† "Archive consistency check complete, no problems found"
        if echo "$error_log" | grep -q "Finished full repository check, no problems found" && \
           echo "$error_log" | grep -q "Archive consistency check complete, no problems found"; then
            # N·∫øu kh√¥ng c√≥ v·∫•n ƒë·ªÅ, ghi v√†o log v·ªõi m·ª©c ƒë·ªô INFO v√† kh√¥ng g·ª≠i Telegram
            log_message "INFO" "Verify backup th√†nh c√¥ng (kh√¥ng c√≥ v·∫•n ƒë·ªÅ)"
            log_message "INFO" "Chi ti·∫øt:\n$(
                echo "$error_log" | grep -m 1 "Finished full repository check, no problems found"
                echo "$error_log" | grep -m 1 "Archive consistency check complete, no problems found"
            )"
        elif [ $verify_status -ne 0 ]; then
            # N·∫øu c√≥ l·ªói, ghi v√†o log v√† g·ª≠i th√¥ng b√°o Telegram
            log_message "ERROR" "Verify th·∫•t b·∫°i v·ªõi l·ªói:\n$error_log"
            send_telegram_message "‚ùå Verify th·∫•t b·∫°i!" "$error_log"
            return 1
        else
            # Ki·ªÉm tra c√°c c·∫£nh b√°o (WARNING)
            if echo "$error_log" | grep -qi "WARNING"; then
                log_message "WARNING" "Verify c√≥ c·∫£nh b√°o:\n$error_log"
                send_telegram_message "‚ö†Ô∏è Verify c√≥ c·∫£nh b√°o" "$error_log"
            else
                log_message "INFO" "Verify backup th√†nh c√¥ng"
            fi
        fi
    else
        log_message "INFO" "B·ªè qua verify (ch∆∞a ƒë·∫øn th·ªùi gian)"
    fi
    return 0
}

# H√†m ki·ªÉm tra ƒëi·ªÅu ki·ªán ti√™n quy·∫øt
check_prerequisites() {
    # Ki·ªÉm tra borg ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t
    if ! command -v borg &> /dev/null; then
        log_message "ERROR" "BorgBackup ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t. Vui l√≤ng c√†i ƒë·∫∑t BorgBackup ƒë·ªÉ ti·∫øp t·ª•c."
        return 1
    fi

    # Ki·ªÉm tra rclone ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t
    if ! command -v rclone &> /dev/null; then
        log_message "ERROR" "Rclone ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t. Vui l√≤ng c√†i ƒë·∫∑t Rclone ƒë·ªÉ ti·∫øp t·ª•c."
        return 1
    fi

    # Ki·ªÉm tra th∆∞ m·ª•c v√† file backup t·ªìn t·∫°i
    for path in $BACKUP_DIR; do
        if [ ! -e "$path" ]; then
            log_message "ERROR" "ƒê∆∞·ªùng d·∫´n ch·ª©a d·ªØ li·ªáu c·∫ßn sao l∆∞u kh√¥ng t·ªìn t·∫°i: $path"
            return 1
        fi
    done

    # Ki·ªÉm tra v√† t·∫°o th∆∞ m·ª•c borg repository n·∫øu c·∫ßn
    if [ ! -d "$BORG_REPO" ]; then
        log_message "INFO" "T·∫°o m·ªõi Borg repository: $BORG_REPO"
        mkdir -p "$BORG_REPO"
        borg init --encryption=none "$BORG_REPO"
        if [ $? -ne 0 ]; then
            log_message "ERROR" "Kh√¥ng th·ªÉ kh·ªüi t·∫°o Borg repository"
            return 1
        fi
    fi

    # T·∫°o th∆∞ m·ª•c log n·∫øu ch∆∞a t·ªìn t·∫°i
    log_dir=$(dirname "$LOG_FILE")
    if [ ! -d "$log_dir" ]; then
        mkdir -p "$log_dir"
    fi

    return 0
}

# H√†m g·ª≠i th√¥ng b√°o Telegram v·ªõi log chi ti·∫øt
send_telegram_message() {
    local message="$1"
    local error_log="$2"
    
    # N·∫øu l√† th√¥ng b√°o th√†nh c√¥ng v√† kh√¥ng c√≥ log l·ªói, kh√¥ng g·ª≠i
    if [[ "$message" == *"‚úÖ"* ]] && [ -z "$error_log" ]; then
        return 0
    fi
    
    # Chu·∫©n b·ªã th√¥ng b√°o v·ªõi th√¥ng tin chi ti·∫øt
    local full_message="$message"
    if [ ! -z "$error_log" ]; then
        # Th√™m th√¥ng tin th·ªùi gian
        local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
        full_message="${full_message}\n\nüïí Th·ªùi gian: ${timestamp}"
        # Th√™m chi ti·∫øt l·ªói
        full_message="${full_message}\n\nüìù Chi ti·∫øt:\n<code>${error_log}</code>"
        # Th√™m th√¥ng tin h·ªá th·ªëng
        local hostname=$(hostname)
        local system_info=$(uname -a)
        full_message="${full_message}\n\nüñ• M√°y ch·ªß: ${hostname}\nüíª H·ªá th·ªëng: ${system_info}"
    fi
    
    curl -s -X POST "https://api.telegram.org/bot$BOT_API_KEY/sendMessage" \
        -d chat_id="$CHAT_ID" \
        -d "text=${full_message}" \
        -d "parse_mode=HTML" \
        > /dev/null
    
    # Ghi log
    log_message "INFO" "ƒê√£ g·ª≠i th√¥ng b√°o Telegram"
}

# H√†m t·∫°o t√™n backup ƒë·ªôc nh·∫•t v·ªõi random
generate_unique_backup_name() {
    local datestamp=$(date +%Y-%m-%d-%H-%M-%S)
    echo "backup-${datestamp}-$RANDOM"
}

# H√†m ki·ªÉm tra xem l·ªói c√≥ n√™n retry kh√¥ng
should_retry() {
    local error_message="$1"
    
    # Danh s√°ch c√°c l·ªói kh√¥ng n√™n retry
    local fatal_errors=(
        "Repository does not exist"
        "Connection refused"
        "No such file or directory"
        "Permission denied"
        "Authentication failed"
    )
    
    for error in "${fatal_errors[@]}"; do
        if echo "$error_message" | grep -q "$error"; then
            return 1
        fi
    done
    
    return 0
}

perform_backup_with_retry() {
    local command="$1"
    local operation="$2"
    local max_retries=3
    local retry_delay=5
    local retry_count=0
    local error_log=""
    
    while [ $retry_count -lt $max_retries ]; do
        # Chu·∫©n b·ªã command c·∫ßn th·ª±c thi
        local exec_command="$command"
        if [ "$operation" = "Borg Create" ]; then
            BACKUP_NAME=$(generate_unique_backup_name)
            exec_command="borg create --compression lz4 \"$BORG_REPO::$BACKUP_NAME\" $BACKUP_DIR"
        fi
        
        log_message "INFO" "Th·ª≠ $operation l·∫ßn $((retry_count + 1))..."
        
        # Th·ª±c thi l·ªánh v√† capture output
        error_log=$(eval "$exec_command" 2>&1)
        if [ $? -eq 0 ]; then
            log_message "INFO" "$operation th√†nh c√¥ng!"
            return 0
        else
            # Ki·ªÉm tra l·ªói "file changed while we backed it up"
			# C√°c file, th∆∞ m·ª•c backup ƒëang c√≥ ·ª©ng d·ª•ng kh√°c chi·∫øm quy·ªÅn ghi, khi·∫øn born kh√¥ng ƒë·ªçc ƒë∆∞·ª£c
            if echo "$error_log" | grep -q "file changed while we backed it up"; then
                log_message "WARNING" "Ph√°t hi·ªán file b·ªã thay ƒë·ªïi trong qu√° tr√¨nh backup, ƒë·ª£i 30s v√† th·ª≠ l·∫°i...\n$error_log"
                sleep 30
                continue # Th·ª≠ l·∫°i ngay m√† kh√¥ng tƒÉng retry_count
            fi
            
            local attempt=$((retry_count + 1))
            log_message "ERROR" "L·∫ßn th·ª≠ $attempt th·∫•t b·∫°i:\n$error_log"
            
            if ! should_retry "$error_log"; then
                log_message "ERROR" "L·ªói nghi√™m tr·ªçng, kh√¥ng retry"
                send_telegram_message "‚ùå $operation th·∫•t b·∫°i v·ªõi l·ªói nghi√™m tr·ªçng!" "$error_log"
                return 1
            fi
            
            send_telegram_message "‚ö†Ô∏è $operation th·∫•t b·∫°i l·∫ßn th·ª≠ $attempt/$max_retries" "$error_log"
            
            sleep $retry_delay
            retry_count=$((retry_count + 1))
        fi
    done
    
    send_telegram_message "‚ùå $operation th·∫•t b·∫°i sau $max_retries l·∫ßn th·ª≠!" "$error_log"
    return 1
}

# Ki·ªÉm tra ƒëi·ªÅu ki·ªán ti√™n quy·∫øt
log_message "INFO" "Ki·ªÉm tra ƒëi·ªÅu ki·ªán ti√™n quy·∫øt..."
if ! check_prerequisites; then
    send_telegram_message "‚ùå Ki·ªÉm tra ƒëi·ªÅu ki·ªán ti√™n quy·∫øt th·∫•t b·∫°i!" "$(tail -n 50 "$LOG_FILE")"
    exit 1
fi

# Ki·ªÉm tra lock file
if [ -e "$LOCKFILE" ]; then
    LOCK_PID=$(cat "$LOCKFILE")
    if [ -n "$LOCK_PID" ] && kill -0 "$LOCK_PID" 2>/dev/null; then
        LOCK_AGE=$(($(date +%s) - $(date +%s -r "$LOCKFILE")))
        if [ "$LOCK_AGE" -gt "$LOCK_TIMEOUT" ]; then
            log_message "WARNING" "Lock file qu√° c≈© (${LOCK_AGE}s). X√≥a v√† ti·∫øp t·ª•c."
            rm -f "$LOCKFILE"
        else
            log_message "WARNING" "Script ƒëang ch·∫°y (${LOCK_AGE}s). Tho√°t."
            exit 1
        fi
    else
        # Process kh√¥ng c√≤n t·ªìn t·∫°i, x√≥a lock file c≈©
        log_message "WARNING" "Lock file t·ªìn t·∫°i nh∆∞ng process ƒë√£ k·∫øt th√∫c. X√≥a v√† ti·∫øp t·ª•c."
        rm -f "$LOCKFILE"
    fi
fi

# S·ª≠ d·ª•ng flock ƒë·ªÉ ki·ªÉm tra v√† t·∫°o lock file
exec 200>"$LOCKFILE"
flock -n 200 || {
    log_message "WARNING" "Script ƒëang ch·∫°y (lock file). Tho√°t."
    send_telegram_message "‚ö†Ô∏è Kh√¥ng th·ªÉ ch·∫°y backup - Script ƒëang ch·∫°y" "Lock file exists"
    exit 1
}

# Ghi PID v√†o lock file
echo $$ > "$LOCKFILE"

# ƒê·∫£m b·∫£o lock file ƒë∆∞·ª£c x√≥a khi script k·∫øt th√∫c
trap 'rm -f "$LOCKFILE"; log_message "INFO" "Script k·∫øt th√∫c."; exit' EXIT SIGINT SIGTERM

# Backup b·∫±ng Borg v·ªõi retry logic
log_message "INFO" "B·∫Øt ƒë·∫ßu t·∫°o backup v·ªõi Borg..."
perform_backup_with_retry "" "Borg Create"
if [ $? -ne 0 ]; then
    exit 1
fi

# Borg Verify - ki·ªÉm tra c√°c b·∫£n backup
perform_verify
if [ $? -ne 0 ]; then
    exit 1
fi

# Prune c√°c backup c≈©
log_message "INFO" "B·∫Øt ƒë·∫ßu prune backup c≈©..."
perform_backup_with_retry "borg prune \
    --keep-hourly=$KEEP_HOURLY \
    --keep-daily=$KEEP_DAILY \
    --keep-monthly=$KEEP_MONTHLY \
    \"$BORG_REPO\"" "Borg Prune"
if [ $? -ne 0 ]; then
    exit 1
fi


# Compact repository
log_message "INFO" "B·∫Øt ƒë·∫ßu compact repository..."
perform_backup_with_retry "borg compact \"$BORG_REPO\"" "Borg Compact"
if [ $? -ne 0 ]; then
    exit 1
fi

# ƒê·ªìng b·ªô backup l√™n RCLONE_REMOTE
log_message "INFO" "ƒê·ªìng b·ªô backup l√™n: $RCLONE_REMOTE..."
perform_backup_with_retry "rclone sync \"$BORG_REPO\" \"$RCLONE_REMOTE\" \
    --transfers=30 --checkers=30 --size-only" "Rclone Sync $RCLONE_REMOTE"
if [ $? -ne 0 ]; then
    exit 1
fi

# ƒê·ªìng b·ªô backup l√™n RCLONE_REMOTE2
log_message "INFO" "ƒê·ªìng b·ªô backup l√™n: $RCLONE_REMOTE2..."
perform_backup_with_retry "rclone sync \"$BORG_REPO\" \"$RCLONE_REMOTE2\" \
    --transfers=30 --checkers=30 --size-only" "Rclone Sync $RCLONE_REMOTE2"
if [ $? -ne 0 ]; then
    exit 1
fi

# K·∫øt th√∫c script th√†nh c√¥ng - kh√¥ng g·ª≠i th√¥ng b√°o Telegram
log_message "INFO" "Backup ho√†n th√†nh!"
exit 0
